COMPLETE/INCOMPLETE

Retries used: NONE (1 extra retry left)

[ ] Completed a design check
[ ] Participated in playtesting

Geometric Engine Requirements
========================================
[ ] Pathfinding and navigation across a loaded navigation mesh
	[ ] Construct a graph from a navigation mesh loaded from an OBJ file
	[ ] Query for the polygon in the mesh directly under a point
	[ ] Search through the graph for a path between two points (feel free to use BFS)
	[ ] Path generation using the simple stupid funnel algorithm

Game Requirements
========================================
[ ] The game must follow all requirements from platformer2
[ ] The player must be able to toggle a visualization of navigation using a key input
	[ ] The visualization must render the navigation mesh
	[ ] The visualization must render the shortest path from the current player position to a target point
	[ ] The target point must be visualized by an ellipsoid (it does not have to collide)
	[ ] The player must be able to change the target point by raycasting the environment (place the center at the result)
	[ ] The player must be able to change the target point by raycasting the target point (place the center at the result)

Global requirements
========================================
[ ] Top-level handin directory contains a Qt project file, a README, and an INSTRUCTIONS file
[ ] README has a copy of the rubric with explanations of how to verify requirements
[ ] README documents any known bugs
[ ] README indicates number of hours taken
[ ] INSTRUCTIONS contains all information needed to play the game
[ ] Engine and game code logically separated
[ ] Engine code well designed
[ ] Game code well designed
[ ] Runs on department machines
[ ] Does not crash
[ ] Works at 800x600 and fullscreen resolutions
[ ] Runs at 30+ UPS and never dips below 20 UPS unless indicated in the specific handout

# Geometric engine requirements
* The bulk of the geometric engine requirements are implemented in the NavMesh
class.

# Game requirements
* The bulk of the game requirements are implemented in the GeometricManager and
GameWorld classes
* The game requirements can also be confirmed by toggling the navigation features

# NOTES
* My BFS finds the path with the least (or tied for least) number of triangles
between the start and end points. However, it does not always find the shortest
path. Therefore, in the string pulling method, the path may be pulled around
portal endpoints that it appears the path does not need to pulled around. This
is a consequence of BFS.
* When I raycast the target ellipsoid, I place the new target slightly back from
the intersection point, so that it moves more.
